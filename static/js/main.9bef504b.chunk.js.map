{"version":3,"sources":["api.js","components/serversTable.js","components/currency.js","components/addServer.js","components/dashboard.js","App.js","serviceWorker.js","index.js"],"names":["fetch","method","then","res","json","data","catch","err","console","log","currency","headers","server","body","JSON","stringify","name","ip","type","isRunning","runTime","price","id","toggle","ServersTable","props","componentDidMount","setState","servers","isLoading","createIntervals","classes","GREEN","DARK","intervals","state","forEach","element","push","createObjTimer","interval","currentTimer","timerString","switchRunning","isRunningSwitchFn","updateRunTimeFn","updatePriceFn","button","document","getElementById","label","textContent","timerObj","filter","item","setAttribute","stopTimer","startTimer","Date","getTime","setInterval","update","clearInterval","now","dt","time","hours","getMinutes","minutes","seconds","getSeconds","timer","pad","fil","n","substr","nextProps","length","this","newServers","deleteServerFn","currencyIconClass","className","style","width","border","scope","map","index","runTimeId","key","borderRadius","onClick","toFixed","marginLeft","Component","Currency","changeCurrencyFn","position","marginTop","right","onChange","value","AddServer","typing","e","textbox","target","submit","preventDefault","checkRequired","sel","options","selectedIndex","text","addServerFn","message","flag","error","msg","showMessage","setTimeout","types","htmlFor","required","defaultValue","slice","role","Dashboard","USD","EUR","ILS","Api","saveThis","window","onbeforeunload","updateSevers","updateCurrency","addServer","clearTextBox","deleteServer","changeCurrency","valueOption","isRunningSwitch","updateRunTime","objTimer","updatePrice","second","margin","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9bef504b.chunk.js","sourcesContent":["\r\nexport default {\r\n    //Get\r\n    fetchServers : () => {\r\n        return fetch('http://localhost:4000/servers', {\r\n            method: \"get\"\r\n        })\r\n        .then(res => res.json())\r\n        .then(data => data)\r\n        .catch(err => console.log(err));\r\n    },\r\n\r\n    fetchTypes : () => {\r\n        return fetch('http://localhost:4000/types', {\r\n            method: \"get\"\r\n        })\r\n        .then(res => res.json())\r\n        .then(data => data)\r\n        .catch(err => console.log(err));\r\n    },\r\n    \r\n    fetchChangeCurrency : (currency) => {\r\n        return fetch(`http://localhost:4000/currency/${currency}`, {\r\n            method: \"get\",\r\n            headers: {\r\n            'Content-Type': 'application/json',\r\n            'Accept': 'application/json',\r\n        }\r\n    })\r\n        .then(res => res.json())\r\n        .then(data => data)\r\n        .catch(err => console.log(err))\r\n    },\r\n\r\n    //POST\r\n    fetchInsert : (server) => {\r\n        return fetch('http://localhost:4000/addserver', {\r\n            method: \"post\",\r\n            headers: {\r\n            'Content-Type': 'application/json',\r\n            'Accept': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n            name: server.name,\r\n            ip: server.ip,\r\n            type: server.type,\r\n            isRunning: server.isRunning,\r\n            runTime:  server.runTime,\r\n            price:  server.price,\r\n          })\r\n        })\r\n        .then(res => res.json())\r\n        .then(data => data)\r\n        .catch(err => console.log(err));\r\n    },\r\n\r\n    //DELETE\r\n    fetchDelete : (id) => {\r\n        return fetch(`http://localhost:4000/deleteserver/${id}`, {\r\n            method: \"delete\",\r\n            headers: {\r\n            'Content-Type': 'application/json',\r\n            'Accept': 'application/json',\r\n        },\r\n        })\r\n        .then(res => res.json())\r\n        .then(data => data)\r\n        .catch(err => console.log(err));\r\n    },\r\n\r\n    fetchUpdateIsRunning: (id, toggle) => {\r\n        return fetch(`http://localhost:4000/switch/${id}`, {\r\n            method: \"put\",\r\n            headers: {\r\n            'Content-Type': 'application/json',\r\n            'Accept': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n            toggle: toggle\r\n          })\r\n        })\r\n        .then(res => res.json())\r\n        .then(data => data)\r\n        .catch(err => console.log(err));\r\n    },\r\n\r\n    fetchUpdateRunTime: (id, runTime) => {\r\n        return fetch(`http://localhost:4000/runtime/${id}`, {\r\n            method: \"put\",\r\n            headers: {\r\n            'Content-Type': 'application/json',\r\n            'Accept': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n            runTime: runTime\r\n          })\r\n        })\r\n        .then(res => res.json())\r\n        .then(data => data)\r\n        .catch(err => console.log(err));\r\n    },\r\n\r\n    fetchUpdatePrice: (id, price) => {\r\n        return fetch(`http://localhost:4000/price/${id}`, {\r\n            method: \"put\",\r\n            headers: {\r\n            'Content-Type': 'application/json',\r\n            'Accept': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n            price: price\r\n          })\r\n        })\r\n        .then(res => res.json())\r\n        .then(data => data)\r\n        .catch(err => console.log(err));\r\n    },\r\n\r\n    fetchPrice: (type) => {\r\n        return fetch(`http://localhost:4000/types/${type}`, {\r\n            method: \"get\",\r\n            headers: {\r\n            'Content-Type': 'application/json',\r\n            'Accept': 'application/json',\r\n        }\r\n        })\r\n        .then(res => res.json())\r\n        .then(data => data)\r\n        .catch(err => console.log(err));\r\n    },\r\n\r\n    fetchUpdateIsRunningOff: () => {\r\n        return fetch('http://localhost:4000/isrunningoff', {\r\n            method: \"put\",\r\n            headers: {\r\n            'Content-Type': 'application/json',\r\n            'Accept': 'application/json',\r\n        }\r\n        })\r\n        .then(res => res.json())\r\n        .then(data => data)\r\n        .catch(err => console.log(err));\r\n    }\r\n}\r\n\r\n","import React, { Component } from 'react'\r\n\r\nclass ServersTable extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = ({isLoading: true,\r\n                        servers: null,\r\n                        intervals: []});\r\n    }\r\n\r\n    componentDidMount = () => {  \r\n        this.setState({servers: this.props.servers}, () => \r\n        {\r\n            this.setState({isLoading: false})\r\n            this.createIntervals();\r\n        });\r\n    }\r\n\r\n    classes = {\r\n        GREEN: 'btn btn-success',\r\n        DARK: 'btn btn-dark'\r\n    }\r\n\r\n    createIntervals = () => {\r\n        this.setState({intervals: []}, () => {\r\n        var intervals = []; \r\n        this.state.servers.forEach(element => {\r\n            intervals.push(this.createObjTimer(element.id))\r\n        });\r\n            this.setState({intervals: intervals});\r\n        });\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n        // Any time props.servers changes, update this state.servers\r\n        if (nextProps.servers.length !== this.props.servers.length) {\r\n            var newServers = nextProps.servers;\r\n          this.setState({servers: newServers}, () => this.createIntervals()\r\n        )\r\n    }\r\n}\r\n    \r\n    createObjTimer = (id) => {\r\n        var objTimer =  {\r\n            id: id,\r\n            interval: null,\r\n            currentTimer: 0,\r\n            timerString: '00:00:00'\r\n        }\r\n        return objTimer\r\n    }\r\n\r\n switchRunning = (id, isRunningSwitchFn, updateRunTimeFn, updatePriceFn, intervals) => {  \r\n    var button = document.getElementById(id);\r\n    var label = button.textContent;\r\n\r\n    var timerObj = intervals.filter(item => item.id === id)[0];\r\n \r\n    // On\r\n    if(label === 'On') \r\n    {\r\n        isRunningSwitchFn(id, 0);\r\n        button.setAttribute(\"class\", this.classes.DARK);\r\n        button.textContent = 'Off';\r\n        this.stopTimer(timerObj, updateRunTimeFn, updatePriceFn);\r\n    }\r\n    //Off\r\n    else \r\n    {\r\n        isRunningSwitchFn(id, 1);\r\n        button.setAttribute(\"class\", this.classes.GREEN);\r\n        button.textContent = 'On';\r\n        this.startTimer(timerObj, updateRunTimeFn, updatePriceFn)\r\n    }\r\n}\r\n\r\n  startTimer = (timerObj, updateRunTimeFn, updatePriceFn) => {\r\n    timerObj['lastUpdateTime'] = new Date().getTime()\r\n    timerObj['interval'] = setInterval(this.update, 10000, timerObj, updateRunTimeFn, updatePriceFn);\r\n    \r\n}\r\n\r\n   stopTimer = (timerObj) => {\r\n    clearInterval(timerObj['interval'])\r\n}\r\n\r\n update = (timerObj, updateRunTimeFn, updatePriceFn) => {\r\n    var now = new Date().getTime();\r\n    \r\n    var dt = now - timerObj['lastUpdateTime'];\r\n\r\n    timerObj['currentTimer'] += dt;\r\n\r\n    var time = new Date(timerObj['currentTimer']);\r\n\r\n    var hours = time.getMinutes() / 60;\r\n    var minutes = time.getMinutes();\r\n    var seconds = time.getSeconds();\r\n\r\n    var timer = this.pad(hours)+ ':' + this.pad(minutes) + ':' + this.pad(seconds);\r\n    timerObj['timerString'] = timer;\r\n    timerObj['lastUpdateTime'] = now;\r\n\r\n    //update runTime\r\n    updateRunTimeFn(timerObj['id'], timerObj)\r\n    var fil = this.state.servers.filter((item) => item.id === timerObj['id'])[0].type;\r\n    \r\n    //update price per second\r\n    updatePriceFn(timerObj['id'], seconds, fil)\r\n    timerObj['lastUpdateTime'] = new Date().getTime()\r\n    timerObj['currentTimer'] = 0;\r\n}\r\n pad = (n) => {\r\n    return ('00' + n).substr(-2);\r\n}\r\n\r\n    render() {\r\n    const {servers, deleteServerFn, currencyIconClass, isRunningSwitchFn, updateRunTimeFn, updatePriceFn} = this.props;\r\n    \r\n    if(this.state.isLoading === true)\r\n        return <h1>Loading...</h1>\r\n    else\r\n    return (\r\n    <table className=\"table table-striped\" style={{width: '100%', border: '1px solid black'}}>\r\n        <thead>\r\n            <tr>\r\n            <th scope=\"col\">IP</th>\r\n            <th scope=\"col\">Server Name</th>\r\n            <th scope=\"col\">Time Running</th>\r\n            <th scope=\"col\">Toggle</th>\r\n            <th scope=\"col\">Type</th>\r\n            <th scope=\"col\">Price</th>\r\n            <th scope=\"col\">Delete</th>\r\n            </tr>\r\n        </thead>\r\n        <tbody>\r\n        {\r\n            servers != null ?\r\n            servers.map((item, index) => {\r\n                var runTimeId = 'runTime_' + item.id;\r\n                return <tr key={index}>\r\n                <td>{item.ip}</td>\r\n                <td>{item.name}</td>\r\n                <td id={runTimeId}>{item.runTime}</td>\r\n                {\r\n                    item.isRunning === 0 ? \r\n                    <td>\r\n                    <button type=\"button\" className=\"btn btn-dark\" id={item.id} style={{borderRadius: '50%'}}\r\n                    onClick={() => this.switchRunning(item.id, isRunningSwitchFn, updateRunTimeFn, updatePriceFn, this.state.intervals)}>Off</button>\r\n                    </td> \r\n                    : <td><button type=\"button\" className=\"btn btn-success\" id={item.id} style={{borderRadius: '50%'}}\r\n                     onClick={() => this.switchRunning(item.id, isRunningSwitchFn, updateRunTimeFn, updatePriceFn, this.state.intervals)}>On</button> \r\n                     </td> \r\n                }\r\n                <td>{item.type}</td>\r\n                <td>{item.price.toFixed(2)}<i className={currencyIconClass} style={{marginLeft: '5px'}}></i></td>\r\n                <td><button type=\"button\" className=\"btn btn-danger\" onClick={() => deleteServerFn(item.id, this.state.intervals)}>Delete</button></td>\r\n            </tr>\r\n            }) : null   \r\n        }\r\n        </tbody>\r\n        </table>)\r\n    }\r\n\r\n}\r\n\r\nexport default ServersTable;\r\n","import React from 'react'\r\n\r\nconst Currency = (props) => {\r\n   const {changeCurrencyFn} = props;\r\n    return <div className=\"form-group\" style={{position: 'absolute',marginTop: '-16px', right:'0',  width: '100px'}}>\r\n        <select className=\"form-control\" id=\"select\" onChange={() => changeCurrencyFn()}>\r\n        <option value=\"USD\">USD</option>\r\n        <option value=\"EUR\">EUR</option>\r\n        <option value=\"ILS\">ILS</option>\r\n        </select>\r\n         </div>\r\n}\r\n\r\nexport default Currency;","import React, { Component } from 'react'\r\n\r\nclass AddServer extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state= {\r\n            name: \"\", ip:\"\", type: \"\", message: {flag: 0, error: null, msg: null}\r\n        }\r\n    }\r\n\r\n    typing = (e, textbox) => {\r\n        const value = e.target.value;\r\n        switch (textbox) {\r\n            case 'name':\r\n                this.setState({name: value})\r\n                break;\r\n            case 'ip':\r\n                this.setState({ip: value})\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    submit = (e) => {\r\n      e.preventDefault();\r\n      if(this.checkRequired())\r\n     { \r\n      const sel = document.getElementById('inputState');\r\n      const type = sel.options[sel.selectedIndex].text\r\n        const server = {\r\n            ip: this.state.ip,\r\n            name: this.state.name,\r\n            type: type,\r\n            isRunning: 0,\r\n            runTime: '00:00:00',\r\n            price: 0\r\n        }\r\n        this.props.addServerFn(server)\r\n        this.setState({message: {flag: 1, error: false, msg: 'Added successfully'}}, () => this.showMessage())\r\n      }\r\n      // error\r\n      else {\r\n        this.setState({message: {flag: 1, error: true, msg: 'All fields are required'}},() => this.showMessage())\r\n      }\r\n    }\r\n \r\n    checkRequired = () => {\r\n      return (this.state.ip !== \"\" && this.state.name !== \"\")\r\n  }\r\n\r\n  showMessage = () => {\r\n     setTimeout(() => this.setState({message: {flag: 0}}), 3000)\r\n  }\r\n\r\n    render(){\r\n        const {types} = this.props;\r\n   \r\n        return <div><form>\r\n        <div className=\"form-row\">\r\n          <div className=\"form-group col-sm-2\">\r\n            <label htmlFor=\"inputName\">Server name</label>\r\n            <input type=\"text\" className=\"form-control\" id=\"inputName\" onChange={(e) => this.typing(e, 'name')} required/>\r\n          </div>\r\n          <div className=\"form-group col-sm-2\">\r\n            <label htmlFor=\"inputIp\">Server IP</label>\r\n            <input type=\"text\" className=\"form-control\" id=\"inputIp\" onChange={(e) => this.typing(e, 'ip')} required/>\r\n          </div>\r\n        </div>\r\n    \r\n        <div className=\"form-row\">\r\n          <div className=\"form-group col-sm-2\">\r\n          {\r\n            types.length > 0 ?\r\n            <select id=\"inputState\" className=\"form-control\">\r\n              <option defaultValue>{types[0].name}</option>\r\n                 { \r\n                    types.slice(1).map((item, index) => {\r\n                    return <option key={index}>{item.name}</option>})\r\n                 }\r\n            </select> :  <select id=\"inputState\" className=\"form-control\"></select>\r\n          }\r\n          </div>\r\n          <div className=\"form-group col-sm-2\">\r\n          <button type=\"submit\" className=\"btn btn-primary\" onClick={(e) => this.submit(e)}>Add Server</button>\r\n          </div>\r\n        </div>\r\n        \r\n        {\r\n          this.state.message.flag === 0 ?\r\n          null \r\n          : this.state.message.flag === 1 && this.state.message.error === true ?\r\n          <div className=\"alert alert-danger\" role=\"alert\">\r\n           {this.state.message.msg}\r\n          </div>\r\n          : <div className=\"alert alert-success\" role=\"alert\">\r\n          {this.state.message.msg}\r\n          </div>\r\n          }\r\n      </form>\r\n      </div>\r\n    }\r\n}\r\n\r\nexport default AddServer;\r\n","import React, { Component } from 'react'\r\nimport Api from '../api'\r\nimport ServersTable from './serversTable';\r\nimport Currency from './currency';\r\nimport AddServer from './addServer';\r\n\r\nclass Dashboard extends Component {\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n        this.state= {\r\n            servers: [],\r\n            types: [],\r\n            currencyIconClass: 'fa fa-usd',\r\n        }\r\n    }\r\n\r\n    currency = {\r\n        USD: 'fa fa-usd',\r\n        EUR: 'fa fa-eur',\r\n        ILS: 'fa fa-ils'\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        Api.fetchServers()\r\n        .then(data => this.setState({servers: data}))\r\n\r\n        Api.fetchTypes()\r\n        .then(data => this.setState({types: data}))\r\n\r\n        var saveThis = this;\r\n        window.onbeforeunload = function () { \r\n            Api.fetchUpdateIsRunningOff()\r\n            .then(() => saveThis.updateSevers());   \r\n            return false; \t\r\n        } \r\n}\r\n \r\n    updateSevers = () => {\r\n        Api.fetchServers()\r\n        .then(data => this.setState({servers: data}))\r\n        document.getElementById(\"select\").selectedIndex = 0; \r\n        this.updateCurrency('USD');\r\n    }\r\n\r\n    addServer = (server) => {\r\n        Api.fetchInsert(server)\r\n        .then(() => this.updateSevers());\r\n\r\n        this.clearTextBox();\r\n    }\r\n\r\n    deleteServer = (id, intervals) => {\r\n        Api.fetchDelete(id)\r\n        .then(() => this.updateSevers());\r\n        //stop running\r\n        var interval = intervals.filter((item) => item.id = id)['interval']\r\n        clearInterval(interval);\r\n    }\r\n\r\n    changeCurrency = () => {\r\n        var valueOption = document.getElementById(\"select\").value;\r\n        this.updateCurrency(valueOption);\r\n    }\r\n\r\n    updateCurrency = (currency) => {\r\n        const EUR = 0.839;\r\n        const ILS = 3.36;\r\n        switch (currency){\r\n            case 'EUR':\r\n                Api.fetchChangeCurrency(EUR)\r\n                .then(data => this.setState({servers: data,\r\n                                            currencyIconClass: this.currency.EUR}));\r\n                break;\r\n            case 'ILS':\r\n                Api.fetchChangeCurrency(ILS)\r\n                .then(data => this.setState({servers: data,\r\n                                            currencyIconClass: this.currency.ILS}));\r\n                break;\r\n            default:\r\n                Api.fetchServers()\r\n                .then(data => this.setState({servers: data,\r\n                                            currencyIconClass: this.currency.USD}))\r\n                break;\r\n        \r\n        }\r\n        \r\n    }\r\n\r\n    isRunningSwitch = (id, isRunning) => {\r\n        isRunning ? \r\n        Api.fetchUpdateIsRunning(id, 1) \r\n        : Api.fetchUpdateIsRunning(id, 0) \r\n    }\r\n\r\n    updateRunTime = (id, objTimer) => {\r\n        Api.fetchUpdateRunTime(id, objTimer['timerString']) \r\n        .then(() => this.updateSevers());\r\n\r\n    }\r\n\r\n    updatePrice = (id, second, type) => {\r\n        Api.fetchPrice(type) \r\n        .then(data => this.setState({price: data[0].price}, \r\n            () => {\r\n            Api.fetchUpdatePrice(id, this.state.price*second) \r\n            .then(() => this.updateSevers())\r\n        }));\r\n    }\r\n\r\n    clearTextBox = () => {\r\n        var name = document.getElementById('inputName');\r\n        var ip = document.getElementById('inputIp');\r\n        var selectType =  document.getElementById(\"inputState\");\r\n       \r\n        selectType.selectedIndex = 0; \r\n        name.value = \"\";\r\n        ip.value = \"\";\r\n    }\r\n\r\n\r\n    render(){\r\n            return <div style={{position: 'relative', width: '800px', margin: '100px auto'}}>\r\n            <ServersTable servers={this.state.servers} deleteServerFn={(id, intervals) => this.deleteServer(id, intervals)}\r\n                            currencyIconClass={this .state.currencyIconClass}\r\n                            isRunningSwitchFn={(id, toggle) => this.isRunningSwitch(id, toggle)}\r\n                            updateRunTimeFn={(id, runTime) => this.updateRunTime(id, runTime)}\r\n                            updatePriceFn={(id, second, price) => this.updatePrice(id, second, price)}\r\n                            />\r\n            <Currency changeCurrencyFn={(e) => this.changeCurrency(e)}/>\r\n            <AddServer types={this.state.types} addServerFn={this.addServer}/>\r\n            </div>\r\n    }\r\n}\r\n\r\nexport default Dashboard;\r\n","import React from 'react';\nimport Dashboard from './components/dashboard'\n\nfunction App() {\n  return (<div>\n          <Dashboard/>\n        </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}